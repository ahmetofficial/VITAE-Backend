#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vitae-test:server');
var http = require('http');
var models = require('../models');

var Sequelize = require('sequelize');
var env = process.env.NODE_ENV || 'development';
var config = require(__dirname + '/../config/config.json')[env];
var sequelize = new Sequelize(config.database, config.username, config.password, config);
var uuidv1 = require('uuid/v1');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Socket IO
 */

io.on('connection', function(socket){
    socket.on('new message', function(message){
        io.emit('new message', message.message_text,message.sender_id);
        var conversation_id = message.conversation_id;
        var sender_id = message.sender_id;
        var receiver_id = message.receiver_id;
        var message_text = message.message_text;
        var sender_ip = message.sender_ip;
        models.MESSAGES.create({
            conversation_id:conversation_id,
            sender_id:sender_id,
            receiver_id:receiver_id,
            message_id: uuidv1(),
            sender_ip:sender_ip,
            message_text: message_text,
            status:0,
            message_active_for_sender:1,
            message_active_for_receiver:1
        });
    });
});

io.on('new message', function (data) {
    socket.broadcast.emit('new message', {
        username: socket.username,
        message: data
    });
    var conversation_id = data.conversation_id;
    var sender_id = data.sender_id;
    var receiver_id = data.receiver_id;
    var message_text = data.message_text;
    var sender_ip = data.sender_ip;
    models.MESSAGES.create({
        conversation_id:conversation_id,
        sender_id:sender_id,
        receiver_id:receiver_id,
        message_id: uuidv1(),
        sender_ip:sender_ip,
        message_text: message_text,
        status:0,
        message_active_for_sender:1,
        message_active_for_receiver:1
    });
});

models.sequelize.sync().then(function() {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port, function() {
    debug('Express server listening on port ' + server.address().port);
  });
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
